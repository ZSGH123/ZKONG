package com.kba.dao.impl;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Vector;

import com.kba.dao.ILoginLogDao;
import com.kba.dao.util.ISqlCommand;
import com.kba.dao.util.NameSpace;
import com.kba.dao.util.ResultSetHandler;
import com.kba.entity.LoginLog;

/**
 * 登录日志dao
 * @author 赵科
 * 创建时间：2019-1-15
 * 修改时间：
 */
public class LoginLogDao extends AbstractBaseDao implements ILoginLogDao,ResultSetHandler<List<LoginLog>>{

	@Override
	public List<LoginLog> queryAll(LoginLog entity) throws SQLException {
		List<LoginLog> loginLogs=null;
		String sql=this.parseSqlStatement.getSql(NameSpace.LOGINLOG, ISqlCommand.SELECT_ALL);
		try {
			loginLogs=this.queryRunner.query(sql, this);
		} catch (SQLException e) {
			throw e;
		}catch (Exception e) {
			logger.info("查询异常");
		}
		return loginLogs;
	}

	@Override
	public LoginLog querySingle(LoginLog entity) throws SQLException {
		String sql=null;
		Object[] params=null;
		
		if(entity==null)return null;
		
		sql=this.parseSqlStatement.getSql(NameSpace.LOGINLOG,ISqlCommand.SELECT_BY_ID);
		
		params=new Object[]{entity.getLoginLogId()};
		
		try {
			List<LoginLog> loginLogs=this.queryRunner.query(sql, this, params);
			return loginLogs != null && loginLogs.size() > 0 ? loginLogs.get(0) : null;
		}catch (SQLException e) {
			throw e;
		}catch (Exception e) {
			logger.error("error",e);
		}
		return null;
	}

	@Override
	public int insert(LoginLog entity) throws SQLException {
		String sql =this.parseSqlStatement.getSql(NameSpace.LOGINLOG, ISqlCommand.INSERT);
	    Object[] args={entity.getUserId(),entity.getLoginTime(),entity.getLoginAddress(),
	    		entity.getLoginState(),entity.getLoginLogRemark()};
	    int res=this.queryRunner.update(sql, args);
	    this.logger.info("插入登录日志["+entity.getLoginTime()+"]成功");
	    return res;
	}

	@Override
	public int update(LoginLog entity) throws SQLException {
		String sql =this.parseSqlStatement.getSql(NameSpace.LOGINLOG, ISqlCommand.UPDATE);
	    Object[] args={entity.getUserId(),entity.getLoginTime(),entity.getLoginAddress(),
	    		entity.getLoginState(),entity.getLoginLogRemark(),entity.getLoginLogId()};
	    int res=this.queryRunner.update(sql, args);
	    this.logger.info("更新登录日志["+entity.getLoginTime()+"]成功");
	    return res;
	}

	@Override
	public int delete(LoginLog entity) throws SQLException {
		String sql=this.parseSqlStatement.getSql(NameSpace.LOGINLOG, ISqlCommand.DELETE);
		Object[]  args={entity.getLoginLogId()};
		int res=this.queryRunner.update(sql, args);
		this.logger.info("删除登录日志["+entity.getLoginTime()+"]成功");
		return res;	
	}

	@Override
	public List<LoginLog> handle(ResultSet rs) throws SQLException {
		List<LoginLog> loginLogs=new Vector<LoginLog>();
		LoginLog loginLog=null;
		if(rs==null){
			throw new SQLException("结果集中没有数据");
		}
		while(rs.next()){
			loginLog=new LoginLog();
			loginLog.setLoginLogId(rs.getString("LOGIN_LOG_ID"));
			loginLog.setUserId(rs.getString("USER_ID"));
			loginLog.setLoginTime(rs.getTimestamp("LOGIN_TIME"));
			loginLog.setLoginAddress(rs.getString("LOGIN_ADDRESS"));
			loginLog.setLoginState(rs.getInt("LOGIN_STATE"));
			loginLog.setLoginLogRemark(rs.getString("LOGIN_LOG_REMARK"));
			loginLogs.add(loginLog);
		}
		return loginLogs;
	}

}
