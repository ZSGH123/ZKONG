package com.kba.dao.impl;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Vector;

import com.kba.dao.IAnchorInfoDao;
import com.kba.dao.util.ISqlCommand;
import com.kba.dao.util.NameSpace;
import com.kba.dao.util.ResultSetHandler;
import com.kba.entity.AnchorInfo;

/**
 * 主播信息dao
 * @author 赵科
 * 创建时间：2019-1-15
 * 修改时间：
 */
public class AnchorInfoDao extends AbstractBaseDao implements IAnchorInfoDao,ResultSetHandler<List<AnchorInfo>>{

	@Override
	public List<AnchorInfo> queryAll(AnchorInfo entity) throws SQLException {
		List<AnchorInfo> anchorInfos=null;
		String sql=this.parseSqlStatement.getSql(NameSpace.ANCHORINFO, ISqlCommand.SELECT_ALL);
		try {
			anchorInfos=this.queryRunner.query(sql, this);
		} catch (SQLException e) {
			throw e;
		}catch (Exception e) {
			logger.info("查询异常");
		}
		return anchorInfos;
	}

	@Override
	public AnchorInfo querySingle(AnchorInfo entity) throws SQLException {
		String sql=null;
		Object[] params=null;
		
		if(entity==null)return null;
		
		sql=this.parseSqlStatement.getSql(NameSpace.ANCHORINFO,ISqlCommand.SELECT_BY_ID);
		
		params=new Object[]{entity.getAnchorId()};
		
		try {
			List<AnchorInfo> anchorInfos=this.queryRunner.query(sql, this, params);
			return  anchorInfos != null &&  anchorInfos.size() > 0 ?  anchorInfos.get(0) : null;
		}catch (SQLException e) {
			throw e;
		}catch (Exception e) {
			logger.error("error",e);
		}
		return null;
	}

	@Override
	public int insert(AnchorInfo entity) throws SQLException {
		String sql =this.parseSqlStatement.getSql(NameSpace.ANCHORINFO, ISqlCommand.INSERT);
	    Object[] args={entity.getUserId(),entity.getLiveRoomId(),
	    		entity.getRegisteredAnchorTime(),entity.getAnchorInfoRemark()};
	    int res=this.queryRunner.update(sql, args);
	    this.logger.info("插入主播信息["+entity.getAnchorId()+"]成功");
	    return res;
	}

	@Override
	public int update(AnchorInfo entity) throws SQLException {
		String sql =this.parseSqlStatement.getSql(NameSpace.ANCHORINFO, ISqlCommand.UPDATE);
	    Object[] args={entity.getUserId(),entity.getLiveRoomId(),
	    		entity.getRegisteredAnchorTime(),entity.getAnchorInfoRemark(),entity.getAnchorId()};
	    int res=this.queryRunner.update(sql, args);
	    this.logger.info("更新主播信息["+entity.getAnchorId()+"]成功");
	    return res;
	}

	@Override
	public int delete(AnchorInfo entity) throws SQLException {
		String sql=this.parseSqlStatement.getSql(NameSpace.ANCHORINFO, ISqlCommand.DELETE);
		Object[]  args={entity.getAnchorId()};
		int res=this.queryRunner.update(sql, args);
		this.logger.info("删除主播信息["+entity.getAnchorId()+"]成功");
		return res;	
	}

	@Override
	public List<AnchorInfo> handle(ResultSet rs) throws SQLException {
		List<AnchorInfo> anchorInfos=new Vector<AnchorInfo>();
		AnchorInfo anchorInfo=null;
		if(rs==null){
			throw new SQLException("结果集中没有数据");
		}
		while(rs.next()){
			anchorInfo=new AnchorInfo();
			anchorInfo.setAnchorId(rs.getString("ANCHOR_ID"));
			anchorInfo.setUserId(rs.getString("USER_ID"));
			anchorInfo.setLiveRoomId(rs.getString("LIVE_ROOM_ID"));
			anchorInfo.setRegisteredAnchorTime(rs.getTimestamp("REGISTERED_ANCHOR_TIME"));
			anchorInfo.setAnchorInfoRemark(rs.getString("ANCHOR_INFO_REMARK"));
			anchorInfos.add(anchorInfo);
		}
		return anchorInfos;
	}

}
