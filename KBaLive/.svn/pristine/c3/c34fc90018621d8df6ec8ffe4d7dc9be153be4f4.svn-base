package com.kba.dao.impl;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Vector;

import com.kba.dao.IVideoBrowseRecordDao;
import com.kba.dao.util.ISqlCommand;
import com.kba.dao.util.NameSpace;
import com.kba.dao.util.ResultSetHandler;
import com.kba.entity.VideoBrowseRecord;

/**
 * 视频浏览记录dao
 * @author 赵科
 * 创建时间：2019-1-15
 * 修改时间：
 */
public class VideoBrowseRecordDao extends AbstractBaseDao implements IVideoBrowseRecordDao,ResultSetHandler<List<VideoBrowseRecord>>{

	/**
	 * 查询所有视频浏览记录
	 */
	@Override
	public List<VideoBrowseRecord> queryAll(VideoBrowseRecord entity) throws SQLException {
		List<VideoBrowseRecord> videoBrowseRecords=null;
		String sql=this.parseSqlStatement.getSql(NameSpace.VIDEOBROWSERECORD, ISqlCommand.SELECT_ALL);
		try {
			videoBrowseRecords=this.queryRunner.query(sql, this);
		} catch (SQLException e) {
			throw e;
		}catch (Exception e) {
			logger.info("查询异常");
		}
		return videoBrowseRecords;
	}

	/**
	 * 查询某个视频浏览记录
	 */
	@Override
	public VideoBrowseRecord querySingle(VideoBrowseRecord entity) throws SQLException {
		String sql=null;
		Object[] params=null;
		
		if(entity==null)return null;
		
		sql=this.parseSqlStatement.getSql(NameSpace.VIDEOBROWSERECORD,ISqlCommand.SELECT_BY_ID);
		
		params=new Object[]{entity.getVideoBrowseRecordId()};
		
		try {
			List<VideoBrowseRecord> videoBrowseRecords=this.queryRunner.query(sql, this, params);
			return videoBrowseRecords != null && videoBrowseRecords.size() > 0 ? videoBrowseRecords.get(0) : null;
		}catch (SQLException e) {
			throw e;
		}catch (Exception e) {
			logger.error("error",e);
		}
		return null;
	}

	/**
	 * 新增视频浏览记录
	 */
	@Override
	public int insert(VideoBrowseRecord entity) throws SQLException {
		String sql =this.parseSqlStatement.getSql(NameSpace.VIDEOBROWSERECORD, ISqlCommand.INSERT);
	    Object[] args={entity.getVideoId(),entity.getUserId(),entity.getSupportState(),
	    		entity.getBrowseTime(),entity.getRemark()};
	    int res=this.queryRunner.update(sql, args);
	    this.logger.info("插入视频浏览记录["+entity.getVideoBrowseRecordId()+"]成功");
	    return res;
	}

	/**
	 * 修改视频浏览记录
	 */
	@Override
	public int update(VideoBrowseRecord entity) throws SQLException {
		String sql =this.parseSqlStatement.getSql(NameSpace.VIDEOBROWSERECORD, ISqlCommand.UPDATE);
	    Object[] args={entity.getVideoId(),entity.getUserId(),entity.getSupportState(),
	    		entity.getBrowseTime(),entity.getRemark(),entity.getVideoBrowseRecordId()};
	    int res=this.queryRunner.update(sql, args);
	    this.logger.info("更新视频浏览记录["+entity.getVideoBrowseRecordId()+"]成功");
	    return res;
	}

	/**
	 * 删除视频浏览记录
	 */
	@Override
	public int delete(VideoBrowseRecord entity) throws SQLException {
		String sql=this.parseSqlStatement.getSql(NameSpace.VIDEOBROWSERECORD, ISqlCommand.DELETE);
		Object[]  args={entity.getVideoBrowseRecordId()};
		int res=this.queryRunner.update(sql, args);
		this.logger.info("删除视频浏览记录["+entity.getVideoBrowseRecordId()+"]成功");
		return res;	
	}

	/**
	 * 视频浏览记录结果集处理
	 */
	@Override
	public List<VideoBrowseRecord> handle(ResultSet rs) throws SQLException {
		List<VideoBrowseRecord> videoBrowseRecords=new Vector<VideoBrowseRecord>();
		VideoBrowseRecord videoBrowseRecord=null;
		if(rs==null){
			throw new SQLException("结果集中没有数据");
		}
		while(rs.next()){
			videoBrowseRecord=new VideoBrowseRecord();
			videoBrowseRecord.setVideoBrowseRecordId(rs.getString("VIDEOBROWSE_RECORD_ID"));
			videoBrowseRecord.setVideoId(rs.getString("VIDEO_ID"));
			videoBrowseRecord.setUserId(rs.getString("USER_ID"));
			videoBrowseRecord.setSupportState(rs.getString("SUPPORT_STATE"));
			videoBrowseRecord.setBrowseTime(rs.getTimestamp("BROWSE_TIME"));
			videoBrowseRecord.setRemark(rs.getString("REMARK"));
			videoBrowseRecords.add(videoBrowseRecord);
		}
		return videoBrowseRecords;
	}

}
