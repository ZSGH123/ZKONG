package com.kba.dao.impl;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Vector;

import com.kba.dao.IPushTypeDao;
import com.kba.dao.util.ISqlCommand;
import com.kba.dao.util.NameSpace;
import com.kba.dao.util.ResultSetHandler;
import com.kba.entity.PushType;

/**
 * 推送类型dao
 * @author 赵科
 * 创建时间：2019-1-15
 * 修改时间：
 */
public class PushTypeDao extends AbstractBaseDao implements IPushTypeDao,ResultSetHandler<List<PushType>>{

	@Override
	public List<PushType> queryAll(PushType entity) throws SQLException {
		List<PushType> pushTypes=null;
		String sql=this.parseSqlStatement.getSql(NameSpace.PUSHTYPE, ISqlCommand.SELECT_ALL);
		try {
			pushTypes=this.queryRunner.query(sql, this);
		} catch (SQLException e) {
			throw e;
		}catch (Exception e) {
			logger.info("查询异常");
		}
		return pushTypes;
	}

	@Override
	public PushType querySingle(PushType entity) throws SQLException {
		String sql=null;
		Object[] params=null;
		
		if(entity==null)return null;
		
		sql=this.parseSqlStatement.getSql(NameSpace.PUSHTYPE,ISqlCommand.SELECT_BY_ID);
		
		params=new Object[]{entity.getPushTypeId()};
		
		try {
			List<PushType> pushTypes=this.queryRunner.query(sql, this, params);
			return pushTypes != null && pushTypes.size() > 0 ? pushTypes.get(0) : null;
		}catch (SQLException e) {
			throw e;
		}catch (Exception e) {
			logger.error("error",e);
		}
		return null;
	}

	@Override
	public int insert(PushType entity) throws SQLException {
		String sql =this.parseSqlStatement.getSql(NameSpace.PUSHTYPE, ISqlCommand.INSERT);
	    Object[] args={entity.getPushName(),entity.getPushPrice(),
	    		entity.getPushTypeRemark()};
	    int res=this.queryRunner.update(sql, args);
	    this.logger.info("插入推送类型["+entity.getPushName()+"]成功");
	    return res;
	}

	@Override
	public int update(PushType entity) throws SQLException {
		String sql =this.parseSqlStatement.getSql(NameSpace.PUSHTYPE, ISqlCommand.UPDATE);
	    Object[] args={entity.getPushName(),entity.getPushPrice(),
	    		entity.getPushTypeRemark(),entity.getPushTypeId()};
	    int res=this.queryRunner.update(sql, args);
	    this.logger.info("更新推送类型["+entity.getPushName()+"]成功");
	    return res;
	}

	@Override
	public int delete(PushType entity) throws SQLException {
		String sql=this.parseSqlStatement.getSql(NameSpace.PUSHTYPE, ISqlCommand.DELETE);
		Object[]  args={entity.getPushTypeId()};
		int res=this.queryRunner.update(sql, args);
		this.logger.info("删除推送类型["+entity.getPushName()+"]成功");
		return res;	
	}

	@Override
	public List<PushType> handle(ResultSet rs) throws SQLException {
		List<PushType> pushTypes=new Vector<PushType>();
		PushType pushType=null;
		if(rs==null){
			throw new SQLException("结果集中没有数据");
		}
		while(rs.next()){
			pushType=new PushType();
			pushType.setPushTypeId(rs.getString("PUSH_TYPE_ID"));
			pushType.setPushName(rs.getString("PUSH_NAME"));
			pushType.setPushPrice(rs.getInt("PUSH_PRICE"));
			pushType.setPushTypeRemark(rs.getString("PUSH_TYPE_REMARK"));
			pushTypes.add(pushType);
		}
		return pushTypes;
	}

}
