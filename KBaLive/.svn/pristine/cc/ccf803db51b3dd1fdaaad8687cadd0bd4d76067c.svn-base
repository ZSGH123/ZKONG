package com.kba.dao.impl;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Vector;

import com.kba.dao.IReportMessageDao;
import com.kba.dao.util.ISqlCommand;
import com.kba.dao.util.NameSpace;
import com.kba.dao.util.ResultSetHandler;
import com.kba.entity.ReportMessage;

/**
 * 举报消息dao
 * @author 赵科
 * 创建时间：2019-1-15
 * 修改时间：
 */
public class ReportMessageDao extends AbstractBaseDao implements IReportMessageDao,ResultSetHandler<List<ReportMessage>>{

	/**
	 * 查询所有举报消息
	 */
	@Override
	public List<ReportMessage> queryAll(ReportMessage entity) throws SQLException {
		List<ReportMessage> reportMessages=null;
		String sql=this.parseSqlStatement.getSql(NameSpace.REPORTMESSAGE, ISqlCommand.SELECT_ALL);
		try {
			reportMessages=this.queryRunner.query(sql, this);
		} catch (SQLException e) {
			throw e;
		}catch (Exception e) {
			logger.info("查询异常");
		}
		return reportMessages;
	}

	/**
	 * 查询某条举报消息
	 */
	@Override
	public ReportMessage querySingle(ReportMessage entity) throws SQLException {
		String sql=null;
		Object[] params=null;
		
		if(entity==null)return null;
		
		sql=this.parseSqlStatement.getSql(NameSpace.REPORTMESSAGE,ISqlCommand.SELECT_BY_ID);
		
		params=new Object[]{entity.getReportMessageId()};
		
		try {
			List<ReportMessage> reportMessages=this.queryRunner.query(sql, this, params);
			return reportMessages != null && reportMessages.size() > 0 ? reportMessages.get(0) : null;
		}catch (SQLException e) {
			throw e;
		}catch (Exception e) {
			logger.error("error",e);
		}
		return null;
	}

	/**
	 * 新增一条举报消息
	 */
	@Override
	public int insert(ReportMessage entity) throws SQLException {
		String sql =this.parseSqlStatement.getSql(NameSpace.REPORTMESSAGE, ISqlCommand.INSERT);
	    Object[] args={entity.getLiveRoomId(),entity.getUserId(),entity.getReportContent(),
	    		entity.getReportTime(),entity.getReportHandleResult(),
	    		entity.getReportMessageRemark()};
	    int res=this.queryRunner.update(sql, args);
	    this.logger.info("插入举报消息["+entity.getReportContent()+"]成功");
	    return res;
	}

	/**
	 * 修改举报消息
	 */
	@Override
	public int update(ReportMessage entity) throws SQLException {
		String sql =this.parseSqlStatement.getSql(NameSpace.REPORTMESSAGE, ISqlCommand.UPDATE);
	    Object[] args={entity.getLiveRoomId(),entity.getUserId(),entity.getReportContent(),
	    		entity.getReportTime(),entity.getReportHandleResult(),
	    		entity.getReportMessageRemark(),entity.getReportMessageId()};
	    int res=this.queryRunner.update(sql, args);
	    this.logger.info("更新举报消息["+entity.getReportContent()+"]成功");
	    return res;
	}

	/**
	 * 删除举报消息
	 */
	@Override
	public int delete(ReportMessage entity) throws SQLException {
		String sql=this.parseSqlStatement.getSql(NameSpace.REPORTMESSAGE, ISqlCommand.DELETE);
		Object[]  args={entity.getReportMessageId()};
		int res=this.queryRunner.update(sql, args);
		this.logger.info("删除举报消息["+entity.getReportContent()+"]成功");
		return res;	
	}

	/**
	 * 举报消息结果集封装
	 */
	@Override
	public List<ReportMessage> handle(ResultSet rs) throws SQLException {
		List<ReportMessage> reportMessages=new Vector<ReportMessage>();
		ReportMessage reportMessage=null;
		if(rs==null){
			throw new SQLException("结果集中没有数据");
		}
		while(rs.next()){
			reportMessage=new ReportMessage();
			reportMessage.setReportMessageId(rs.getString("REPORT_MESSAGE_ID"));
			reportMessage.setLiveRoomId(rs.getString("LIVE_ROOM_ID"));
			reportMessage.setUserId(rs.getString("USER_ID"));
			reportMessage.setReportContent(rs.getString("REPORT_CONTENT"));
			reportMessage.setReportTime(rs.getTimestamp("REPORT_TIME"));
			reportMessage.setReportHandleResult(rs.getInt("REPORT_HANDLE_RESULT"));
			reportMessage.setReportMessageRemark(rs.getString("REPORT_MESSAGE_REMARK"));
			reportMessages.add(reportMessage);
		}
		return reportMessages;
	}

}
