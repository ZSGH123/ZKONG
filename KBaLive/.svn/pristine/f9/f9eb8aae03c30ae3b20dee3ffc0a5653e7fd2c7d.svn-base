package com.kba.dao.impl;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Vector;

import com.kba.dao.IUserPropertyDao;
import com.kba.dao.util.ISqlCommand;
import com.kba.dao.util.NameSpace;
import com.kba.dao.util.ResultSetHandler;
import com.kba.entity.UserProperty;

/**
 * 用户钱包dao
 * @author 赵科
 * 创建时间：2019-1-15
 * 修改时间：
 */
public class UserPropertyDao extends AbstractBaseDao implements IUserPropertyDao,ResultSetHandler<List<UserProperty>>{

	private static UserPropertyDao userPropertyDao;
	
	private UserPropertyDao(){
		
	}
	
	public synchronized static UserPropertyDao getInstance(){
		if(userPropertyDao==null){
			userPropertyDao=new UserPropertyDao();
		}
		return userPropertyDao;
	}
	/**
	 * 查询所有钱包信息
	 */
	@Override
	public List<UserProperty> queryAll(UserProperty entity) throws SQLException {
		List<UserProperty> userPropertys=null;
		String sql=this.parseSqlStatement.getSql(NameSpace.USERPROPERTY, ISqlCommand.SELECT_ALL);
		try {
			userPropertys=this.queryRunner.query(sql, this);
		} catch (SQLException e) {
			throw e;
		}catch (Exception e) {
			logger.info("查询异常");
		}
		return userPropertys;
	}

	/**
	 * 查询某个用户钱包信息
	 */
	@Override
	public UserProperty querySingle(UserProperty entity) throws SQLException {
		String sql=null;
		Object[] params=null;
		
		if(entity==null)return null;
		
		sql=this.parseSqlStatement.getSql(NameSpace.USERPROPERTY,ISqlCommand.SELECT_BY_ID);
		
		params=new Object[]{entity.getUserPropertyId()};
		
		try {
			List<UserProperty> userPropertys=this.queryRunner.query(sql, this, params);
			return userPropertys != null && userPropertys.size() > 0 ? userPropertys.get(0) : null;
		}catch (SQLException e) {
			throw e;
		}catch (Exception e) {
			logger.error("error",e);
		}
		return null;
	}

	/**
	 * 新增用户钱包
	 */
	@Override
	public int insert(UserProperty entity) throws SQLException {
		String sql =this.parseSqlStatement.getSql(NameSpace.LIVETYPE, ISqlCommand.INSERT);
	    Object[] args={entity.getUserId(),entity.getkTypeId(),entity.getkNumber(),
	    		entity.getUserPropertyRemark()};
	    int res=this.queryRunner.update(sql, args);
	    this.logger.info("插入用户钱包["+entity.getUserPropertyId()+"]成功");
	    return res;
	}

	/**
	 * 修改用户钱包信息
	 */
	@Override
	public int update(UserProperty entity) throws SQLException {
		String sql =this.parseSqlStatement.getSql(NameSpace.LIVETYPE, ISqlCommand.UPDATE);
	    Object[] args={entity.getUserId(),entity.getkTypeId(),entity.getkNumber(),
	    		entity.getUserPropertyRemark(),entity.getUserPropertyId()};
	    int res=this.queryRunner.update(sql, args);
	    this.logger.info("更新用户钱包["+entity.getUserPropertyId()+"]成功");
	    return res;
	}

	/**
	 * 删除用户钱包
	 */
	@Override
	public int delete(UserProperty entity) throws SQLException {
		String sql=this.parseSqlStatement.getSql(NameSpace.LIVETYPE, ISqlCommand.DELETE);
		Object[]  args={entity.getUserPropertyId()};
		int res=this.queryRunner.update(sql, args);
		this.logger.info("删除用户钱包["+entity.getUserPropertyId()+"]成功");
		return res;	
	}

	/**
	 * 用户钱包结果集处理
	 */
	@Override
	public List<UserProperty> handle(ResultSet rs) throws SQLException {
		List<UserProperty> userPropertys=new Vector<UserProperty>();
		UserProperty userProperty=null;
		if(rs==null){
			throw new SQLException("结果集中没有数据");
		}
		while(rs.next()){
			userProperty=new UserProperty();
			userProperty.setUserPropertyId(rs.getString("USER_PROPERTY_ID"));
			userProperty.setUserId(rs.getString("USER_ID"));
			userProperty.setkTypeId(rs.getString("K_TYPE_ID"));
			userProperty.setkNumber(rs.getInt("K_NUMBER"));
			userProperty.setUserPropertyRemark(rs.getString("USER_PROPERTY_REMARK"));
			userPropertys.add(userProperty);
		}
		return userPropertys;
	}

}
