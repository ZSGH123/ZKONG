package com.kba.dao.impl;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Vector;

import com.kba.dao.IRoomManagerInfoDao;
import com.kba.dao.util.ISqlCommand;
import com.kba.dao.util.NameSpace;
import com.kba.dao.util.ResultSetHandler;
import com.kba.entity.RoomManagerInfo;

/**
 * 房间管理员信息dao
 * @author 赵科
 * 创建时间：2019-1-15
 * 修改时间：
 */
public class RoomManagerInfoDao extends AbstractBaseDao implements IRoomManagerInfoDao,ResultSetHandler<List<RoomManagerInfo>>{

	@Override
	public List<RoomManagerInfo> queryAll(RoomManagerInfo entity) throws SQLException {
		List<RoomManagerInfo> roomManagerInfos=null;
		String sql=this.parseSqlStatement.getSql(NameSpace.ROOMMANAGERINFO, ISqlCommand.SELECT_ALL);
		try {
			roomManagerInfos=this.queryRunner.query(sql, this);
		} catch (SQLException e) {
			throw e;
		}catch (Exception e) {
			logger.info("查询异常");
		}
		return roomManagerInfos;
	}

	@Override
	public RoomManagerInfo querySingle(RoomManagerInfo entity) throws SQLException {
		String sql=null;
		Object[] params=null;
		
		if(entity==null)return null;
		
		sql=this.parseSqlStatement.getSql(NameSpace.ROOMMANAGERINFO,ISqlCommand.SELECT_BY_ID);
		
		params=new Object[]{entity.getRoomManagerId()};
		
		try {
			List<RoomManagerInfo> roomManagerInfos=this.queryRunner.query(sql, this, params);
			return roomManagerInfos != null && roomManagerInfos.size() > 0 ? roomManagerInfos.get(0) : null;
		}catch (SQLException e) {
			throw e;
		}catch (Exception e) {
			logger.error("error",e);
		}
		return null;
	}

	@Override
	public int insert(RoomManagerInfo entity) throws SQLException {
		String sql =this.parseSqlStatement.getSql(NameSpace.ROOMMANAGERINFO, ISqlCommand.INSERT);
	    Object[] args={entity.getUserId(),entity.getLiveRoomId(),entity.getRoomManagerWordTime(),
	    		entity.getRoomManagerRemark()};
	    int res=this.queryRunner.update(sql, args);
	    this.logger.info("插入房间管理员["+entity.getRoomManagerId()+"]成功");
	    return res;
	}

	@Override
	public int update(RoomManagerInfo entity) throws SQLException {
		String sql =this.parseSqlStatement.getSql(NameSpace.ROOMMANAGERINFO, ISqlCommand.UPDATE);
	    Object[] args={entity.getUserId(),entity.getLiveRoomId(),entity.getRoomManagerWordTime(),
	    		entity.getRoomManagerRemark(),entity.getRoomManagerId()};
	    int res=this.queryRunner.update(sql, args);
	    this.logger.info("更新房间管理员["+entity.getRoomManagerId()+"]成功");
	    return res;
	}

	@Override
	public int delete(RoomManagerInfo entity) throws SQLException {
		String sql=this.parseSqlStatement.getSql(NameSpace.ROOMMANAGERINFO, ISqlCommand.DELETE);
		Object[]  args={entity.getRoomManagerId()};
		int res=this.queryRunner.update(sql, args);
		this.logger.info("删除房间管理员["+entity.getRoomManagerId()+"]成功");
		return res;	
	}

	@Override
	public List<RoomManagerInfo> handle(ResultSet rs) throws SQLException {
		List<RoomManagerInfo> roomManagerInfos=new Vector<RoomManagerInfo>();
		RoomManagerInfo roomManagerInfo=null;
		if(rs==null){
			throw new SQLException("结果集中没有数据");
		}
		while(rs.next()){
			roomManagerInfo=new RoomManagerInfo();
			roomManagerInfo.setRoomManagerId(rs.getString("ROOM_MANAGER_ID"));
			roomManagerInfo.setUserId(rs.getString("USER_ID"));
			roomManagerInfo.setLiveRoomId(rs.getString("LIVE_ROOM_ID"));
			roomManagerInfo.setRoomManagerWordTime(rs.getTimestamp("ROOM_MANAGER_WORK_TIME"));
			roomManagerInfo.setRoomManagerRemark(rs.getString("ROOM_MANAGER_REMARK"));
			roomManagerInfos.add(roomManagerInfo);
		}
		return roomManagerInfos;
	}

	

}
