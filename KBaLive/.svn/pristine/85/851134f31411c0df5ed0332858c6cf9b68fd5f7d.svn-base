package com.kba.action;

import java.io.IOException;
import java.util.List;
import java.util.Vector;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.kba.entity.LiveContent;
import com.kba.entity.LiveRoom;
import com.kba.entity.LiveType;
import com.kba.entity.PushType;
import com.kba.service.IIndexService;
import com.kba.service.ILiveRoomService;
import com.kba.service.impl.IndexService;
import com.kba.service.impl.LiveRoomService;
import com.kba.util.KBaException;
import com.kba.vo.LiveRoomDetailInfo;

/**
 * 网站首页：响应整个程序的首页请求 
 * 作者：赵科
 * 时间：2019-1-15
 */
public class IndexServlet extends KBaBaseServlet{

	private static final long serialVersionUID = 1L;
    
	private IIndexService indexService;
	private ILiveRoomService liveRoomService;
	public IndexServlet(){
		indexService=new IndexService();
		liveRoomService=new LiveRoomService();
	}
    
	@Override
	protected void service_(String command, HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		
		
	}
    /**
     * 前台首页
     */
	@Override
	protected void index(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		// TODO Auto-generated method stub
		//1.初始化直播分类
		this.initLiveContent(req,resp);
		//2.初始化直播房间显示
		this.initLiveRoom(req,resp);
		//3.初始化所有推送直播房间显示
		this.initPushRoomShow(req,resp);
		req.getRequestDispatcher("index.jsp").forward(req, resp);
	}
	
	/**
	 * 初始化所有推送直播房间显示
	 * @param req
	 * @param resp
	 */
	private void initPushRoomShow(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException{
		HttpSession session=this.getSession();
		List<PushType> pushTypes=null;
		List<LiveRoomDetailInfo> pushliveRoomDetailInfos=null;
		List<LiveRoomDetailInfo> liveRoomDetailInfos=null;
		List<LiveRoomDetailInfo> liveRoomDetailInfosByContent=null;
		List<LiveRoomDetailInfo> extraliveRoomDetailInfos=null;
		try {
			pushTypes=indexService.queryAllPushType(null);
			session.setAttribute("pushTypes", pushTypes);
			for (int i=0;i<pushTypes.size();i++) {
				//1.查询正在推送的所有房间
				pushliveRoomDetailInfos=selectLiveRoomDetailInfoByNum(indexService.selectAllByPushTypeId(pushTypes.get(i)),4);
				//保存发钱推送的直播间
				session.setAttribute("pushliveRoomDetailInfos"+i, pushliveRoomDetailInfos);
				if(pushliveRoomDetailInfos.size()<4){//位置不满
					//2.查询与该推送内容相关的所有房间
					liveRoomDetailInfosByContent=indexService.selectAllByLiveCotentName(spwan(pushTypes.get(i)));
					//3.删除正在推送的房间
					liveRoomDetailInfos=this.delLiveRoomDetailInfo(liveRoomDetailInfosByContent);
					//4.找出剩余的需推送的房间,按照直播分数高低
					liveRoomDetailInfos=this.selectLiveRoomDetailInfoByNum(liveRoomDetailInfos,4-pushliveRoomDetailInfos.size());
					//5.保存不是花钱推送的直播间
					session.setAttribute("liveRoomDetailInfos"+i, liveRoomDetailInfos);
				}
				if(pushliveRoomDetailInfos.size()+liveRoomDetailInfos.size()>=4){//位置满了
					//剔除已经在推送的房间
					extraliveRoomDetailInfos=this.delLiveRoomDetailInfo(liveRoomDetailInfosByContent);
					extraliveRoomDetailInfos=this.selectLiveRoomDetailInfoByNum(extraliveRoomDetailInfos,4-pushliveRoomDetailInfos.size(),4);
					session.setAttribute("extraliveRoomDetailInfos"+i, extraliveRoomDetailInfos);
				}
			}
		} catch (KBaException e) {
			this.toError(e, resp);
		}
	}

	/**
     * 初始化直播房间显示
     * @param req
     * @param resp
     * @throws ServletException
     * @throws IOException
     */
	private void initLiveRoom(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException{
		HttpSession session=this.getSession();
		List<LiveRoom> liveRooms=null;
		try {
			liveRooms=liveRoomService.selectAllLiveRoomSorted(null);
			session.setAttribute("liveRoomsTop",liveRooms);
		} catch (KBaException e) {
			this.toError(e, resp);
		}	
	}
	
    /**
     * 初始化直播内容
     * @param req
     * @param resp
     * @throws ServletException
     * @throws IOException
     */
	public void initLiveContent(HttpServletRequest req, HttpServletResponse resp) 
			throws ServletException, IOException{
		HttpSession session=this.getSession();
		List<LiveType> liveTypes=null;
		List<LiveContent> liveContents=null;
		List<LiveContent> liveContentsDb=null;
		List<LiveRoom> liveRooms=null;
		try {
			liveTypes=indexService.selectAllLiveType(null);
			getSession().setAttribute("bg", liveTypes.get(0).getLiveTypeRemark());
			liveContentsDb=indexService.selectAllLiveContent(null);
			session.setAttribute("liveContents", this.selectByLiveType(liveContentsDb, 14));
			for(int i=0;i<liveTypes.size();i++){
				LiveType liveType=liveTypes.get(i);
				System.out.println("类型"+liveType);
				session.setAttribute("liveType"+i, liveType);
				liveContents=this.selectByLiveType(liveContentsDb, liveType);
				session.setAttribute("liveContents"+i, liveContents);
				if(liveContents!=null&&liveContents.size()>0){
				  liveRooms=liveRoomService.selectByLiveContentID(spwan(liveContents.get(0)),3);  
				}
				session.setAttribute("liveRooms"+i,liveRooms);
			}
		} catch (KBaException e) {
			this.toError(e, resp);
		}
	}
	/**
	 * 封装直播内容
	 * @param liveType
	 * @return
	 */
	private LiveContent spwan(LiveType liveType){
		LiveContent liveContent=new LiveContent();
		liveContent.setLiveTypeId(liveType.getLiveTypeId());
		return liveContent;
	}
	
	private LiveContent spwan(PushType pushType){
		LiveContent liveContent=new LiveContent();
		liveContent.setLiveContentName(pushType.getPushName());
		return liveContent;
	}
	
	private LiveRoom spwan(LiveContent liveContent){
		LiveRoom liveRoom=new LiveRoom();
		liveRoom.setLiveContentId(liveContent.getLiveContentId());
		return liveRoom;
	}
	
	/**
	 * 根据直播类型查询相应直播内容
	 */
	public List<LiveContent> selectByLiveType(List<LiveContent> liveContentsDb,LiveType liveType) {
		List<LiveContent> liveContents=new Vector<LiveContent>();
		for (LiveContent liveContent2 : liveContentsDb) {
			if(liveContent2.getLiveTypeId().equals(liveType.getLiveTypeId())){
				liveContents.add(liveContent2);
			}
		}
		return liveContents;
	}
	
	/**
	 *查询指定数量的直播内容
	 */
	public List<LiveContent> selectByLiveType(List<LiveContent> liveContentsDb,int num) {
		if(num>liveContentsDb.size()){
			return liveContentsDb;
		}else {
			return liveContentsDb.subList(0, num);
		}
	}
	
	/**
	 *查询指定数量的直播详细信息
	 */
	public List<LiveRoomDetailInfo> selectLiveRoomDetailInfoByNum(List<LiveRoomDetailInfo> list,int num){
		return selectLiveRoomDetailInfoByNum(list, 0,num);
	}
	
	/**
	 *查询从指定位置开始，指定数量的直播详细信息
	 */
	public List<LiveRoomDetailInfo> selectLiveRoomDetailInfoByNum(List<LiveRoomDetailInfo> list,int start,int num) {
		if(start<0||list==null) return null;
		int length=list.size();
		if(start>length) return null;
		if(num<=0) return null;
		if(start+num>list.size()){
			return list.subList(start, length);
		}else {
			return list.subList(start, num);
		}
	}
	/**
	 *剔除正在推送的直播详细信息
	 */
	public List<LiveRoomDetailInfo> delLiveRoomDetailInfo(List<LiveRoomDetailInfo> list){
		List<LiveRoomDetailInfo> listRoomDetailInfos=new Vector<LiveRoomDetailInfo>();
		for (LiveRoomDetailInfo liveRoomDetailInfo : list) {
			if(liveRoomDetailInfo.getPushList().getLiveRoomId()==null){
				listRoomDetailInfos.add(liveRoomDetailInfo);
			}
		}
		return listRoomDetailInfos;
	}
}
