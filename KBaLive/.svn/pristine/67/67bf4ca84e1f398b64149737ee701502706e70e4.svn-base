package com.kba.dao.impl;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Vector;

import com.kba.dao.IUserGiftRecordDao;
import com.kba.dao.util.ISqlCommand;
import com.kba.dao.util.NameSpace;
import com.kba.dao.util.ResultSetHandler;
import com.kba.entity.UserGiftRecord;

/**
 * 用户赠礼记录dao
 * @author 赵科
 * 创建时间：2019-1-15
 * 修改时间：
 */
public class UserGiftRecordDao extends AbstractBaseDao implements IUserGiftRecordDao,ResultSetHandler<List<UserGiftRecord>>{

	private static UserGiftRecordDao userGiftRecordDao;
	
	private  UserGiftRecordDao() {
		
	}
	
	public synchronized static UserGiftRecordDao getInstance(){
		if(userGiftRecordDao==null){
			userGiftRecordDao=new UserGiftRecordDao();
		}
		return userGiftRecordDao;
	}
	/**
	 * 查询所有用户赠礼记录
	 */
	@Override
	public List<UserGiftRecord> queryAll(UserGiftRecord entity) throws SQLException {
		List<UserGiftRecord> userGiftRecords=null;
		String sql=this.parseSqlStatement.getSql(NameSpace.USERGIFTRECORD, ISqlCommand.SELECT_ALL);
		try {
			userGiftRecords=this.queryRunner.query(sql, this);
		} catch (SQLException e) {
			throw e;
		}catch (Exception e) {
			logger.info("查询异常");
		}
		return userGiftRecords;
	}

	/**
	 * 查询单个用户赠礼记录
	 */
	@Override
	public UserGiftRecord querySingle(UserGiftRecord entity) throws SQLException {
		String sql=null;
		Object[] params=null;
		
		if(entity==null)return null;
		
		sql=this.parseSqlStatement.getSql(NameSpace.USERGIFTRECORD,ISqlCommand.SELECT_BY_ID);
		
		params=new Object[]{entity.getUserGiftId()};
		
		try {
			List<UserGiftRecord> userGiftRecords=this.queryRunner.query(sql, this, params);
			return userGiftRecords != null && userGiftRecords.size() > 0 ? userGiftRecords.get(0) : null;
		}catch (SQLException e) {
			throw e;
		}catch (Exception e) {
			logger.error("error",e);
		}
		return null;
	}

	/**
	 * 新增赠礼记录
	 */
	@Override
	public int insert(UserGiftRecord entity) throws SQLException {
		String sql =this.parseSqlStatement.getSql(NameSpace.USERGIFTRECORD, ISqlCommand.INSERT);
	    Object[] args={entity.getLiveRoomId(),entity.getUserId(),entity.getGiftTypeId(),
	    		entity.getGiftNumber(),entity.getGiftTime(),entity.getAnchorUserId(),
	    		entity.getUserGiftRemark()};
	    int res=this.queryRunner.update(sql, args);
	    this.logger.info("插入用户赠礼记录["+entity.getUserGiftId()+"]成功");
	    return res;
	}

	/**
	 * 删除赠礼记录
	 */
	@Override
	public int update(UserGiftRecord entity) throws SQLException {
		String sql =this.parseSqlStatement.getSql(NameSpace.USERGIFTRECORD, ISqlCommand.UPDATE);
	    Object[] args={entity.getLiveRoomId(),entity.getUserId(),entity.getGiftTypeId(),
	    		entity.getGiftNumber(),entity.getGiftTime(),entity.getAnchorUserId(),
	    		entity.getUserGiftRemark(),entity.getUserGiftId()};
	    int res=this.queryRunner.update(sql, args);
	    this.logger.info("更新用户赠礼记录["+entity.getUserGiftId()+"]成功");
	    return res;
	}

	/**
	 * 删除赠礼记录
	 */
	@Override
	public int delete(UserGiftRecord entity) throws SQLException {
		String sql=this.parseSqlStatement.getSql(NameSpace.USERGIFTRECORD, ISqlCommand.DELETE);
		Object[]  args={entity.getUserGiftId()};
		int res=this.queryRunner.update(sql, args);
		this.logger.info("删除用户赠礼记录["+entity.getUserGiftId()+"]成功");
		return res;	
	}

	/**
	 * 赠礼记录结果集处理
	 */
	@Override
	public List<UserGiftRecord> handle(ResultSet rs) throws SQLException {
		List<UserGiftRecord> userGiftRecords=new Vector<UserGiftRecord>();
		UserGiftRecord userGiftRecord=null;
		if(rs==null){
			throw new SQLException("结果集中没有数据");
		}
		while(rs.next()){
			userGiftRecord=new UserGiftRecord();
			userGiftRecord.setUserGiftId(rs.getString("USER_GIFT_ID"));
			userGiftRecord.setLiveRoomId(rs.getString("LIVE_ROOM_ID"));
			userGiftRecord.setUserId(rs.getString("USER_ID"));
			userGiftRecord.setGiftTypeId(rs.getString("GIFT_TYPE_ID"));
			userGiftRecord.setGiftNumber(rs.getInt("GIFT_NUMBER"));
			userGiftRecord.setGiftTime(rs.getTimestamp("GIFT_TIME"));
			userGiftRecord.setAnchorUserId(rs.getString("ANCHOR_USER_ID"));
			userGiftRecord.setUserGiftRemark(rs.getString("USER_GIFT_REMARK"));
			userGiftRecords.add(userGiftRecord);
		}
		return userGiftRecords;
	}

}
